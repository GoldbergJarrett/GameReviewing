@page "/"
@using GameReviewing.Services.Interfaces
@using GameReviewing.Models
@inject IGameService GameService
@inject ILogger Logger

@using GameReviewing.Components

    <div>
        <h1>List of Games</h1>

        <div style="position: relative;">
                @foreach (Game game in Games)
                {
            <div style="margin-bottom: 5px; display: flex; align-items: center;">
                <div style="display: flex; align-items: center; width: 200px; height: 200px;">
                    @if (!string.IsNullOrWhiteSpace(game.ImagePath))
                    {
                        <img src="@game.ImagePath" style="        max-width: 200px;
        max-height: 200px;" />
                    }
                </div>
                @game.Title, @(game.Rating)
                <div @onclick="((MouseEventArgs e) => ReviewGame(e, game))" class="btn btn-primary">Review</div>
                <div @onclick="(() => NavigateToGameDetails(game.Id))" class="btn btn-success">Details</div>
                <div @onclick="(() => NavigateToGameEdit(game.Id))" class="btn btn-warning">Edit</div>
            </div>
                }
            <ReviewGameComponent Game="@CurrentlyReviewing" Parent="this" />
        </div>
    </div>
@code
{
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public Game CurrentlyReviewing { get; set; }

    public List<Game> Games { get; set; }

    public ReviewGameComponent ReviewGameComponent { get; set; }

    public void NavigateToGameDetails(int id)
    {
        NavigationManager.NavigateTo($"/Game/Details/{id}");
    }

    public void NavigateToGameEdit(int id)
    {
        NavigationManager.NavigateTo($"/Game/Edit/{id}");
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Games = GameService.GetGames();
    }

    public void ReviewGame(MouseEventArgs e, Game game)
    {
        CurrentlyReviewing = game;

        ReviewGameComponent.Left = e.ClientX;
        ReviewGameComponent.Top = e.ClientY;
    }

    public void PublicStateHasChanged()
    {
        StateHasChanged();
    }
}